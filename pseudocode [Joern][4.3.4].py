# Version 4.3.4
# Libraries (Python Packages)
from joern.all import JoernSteps
from py2neo.packages.httpstream import http
#http.socket_timeout = -
http.my_variable=1
import xlsxwriter
import json
# Configs
j = JoernSteps()
j.setGraphDbURL('http://localhost:7474/db/data/')
# j.addStepsDir('Use this to inject utility traversals')
# res =  j.runCypherQuery('...')
j.connectToDatabase()

#####################
#Help Functions:
def get_unique_list(my_list):
    seen = []
    return [x for x in my_list if x not in seen and not seen.append(x)]

#FunctionMetricList
FunctionMetricList = []
# Get Functions List (FunctionId) & create FunctionMetricList
Func_List =  j.runGremlinQuery("queryNodeIndex('type: Function').id")
#Function Id List
for functionId in Func_List: FunctionMetricList.append([functionId,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'',''])

Func_List=None
print 'Numbers of Functions:\n'
Numbers_of_Functions =  j.runGremlinQuery("queryNodeIndex('type: Function').count()")
print Numbers_of_Functions


#get Full data of All functions
Fun_Data_Query =  j.runGremlinQuery("queryNodeIndex('type: File').as('x').out().filter{it.type=='Function'}.as('y').select{it}{it}.groupBy{it[0]}{it[1]}")
functions_all_data = []
for item in Fun_Data_Query:
	functions_all_data.append([item[1]._id , item[1]['name'] , item[0]['filepath']])


Fun_Data_Query=None

for functionId in FunctionMetricList:
	for item in functions_all_data:
		if functionId[0] == item[0]:
			functionId[30] = item[1]
			functionId[31] = item[2]

# M1: (Cyclomatic Complexity : E - N + 2)
print "\n"
print "******************** M1 ********************"
print "Cyclomatic Complexity:\n"
#CFG Nodes
http.my_variable=5
CFG_Nodes =  j.runGremlinQuery("queryNodeIndex('functionId:(*) AND isCFGNode:True').functionId.groupCount()")
http.my_variable=1
for item_id in CFG_Nodes:
	for functionId in FunctionMetricList:
		if item_id == functionId[0]:
			functionId[1] -=1
	
CFG_Nodes=None
#CFG Edges 
http.my_variable=5
CFG_Edges =  j.runGremlinQuery("queryNodeIndex('functionId:(*) AND isCFGNode:True').as('x').outE('FLOWS_TO').id.as('y').select{it.functionId}{it}.groupBy{it[0]}{it[1]}{it.size()}")
http.my_variable=1
for item in CFG_Edges:
	for functionId in FunctionMetricList:
		if item[0] == functionId[0]:
			functionId[1] +=1

CFG_Edges=None
for functionId in FunctionMetricList: functionId[1] +=2

print 'Cyclomatic Complexity value:\n'
for functionId in FunctionMetricList:
	print 'Function with id [',functionId[0],'] = ', functionId[1]

# M2: (Number Of Loops)
print "\n"
print "******************** M2 ********************"
print "Number Of Loops:\n"

http.my_variable=5
C2_Query = j.runGremlinQuery("queryNodeIndex('functionId:(*) AND type:(ForStatement WhileStatement DoStatement)').groupBy{it.functionId}{it.id}")
http.my_variable=1
print 'Query Statements:\n'
for query in C2_Query: print query
print '\n'
for query in C2_Query:
	for functionId in FunctionMetricList:
		if query['functionId'] == functionId[0]:
			functionId[2] +=1

C2_Query=None
print '\nC2 Value:\n'
for functionId in FunctionMetricList:
	print 'Function with id [',functionId[0],'] = ', functionId[2]
print "\n"

# M3: (Number Of Nested Loops)
print "\n"
print "******************** M3 ********************"
print "Number Of nested Loops:\n"
http.my_variable=5
C3_Query = j.runGremlinQuery("queryNodeIndex('functionId:(*) AND type:(ForStatement WhileStatement DoStatement)').groupBy{it.functionId}{it.id}.as('x').astNodes().children().as('y').filter{it.type == 'ForStatement' || it.type == 'WhileStatement' || it.type == 'DoStatement'}.select{it}{it}.groupBy{it[0]}{it[1]}")
print 'Query Statements:\n'
http.my_variable=1
DuplicateNodeIdList = []

for query in C3_Query:
	for functionId in FunctionMetricList:
		if query[0]['functionId'] == functionId[0]:
			if query[0]._Node__id != query[1]._Node__id:
				if not ((query[0]._Node__id in DuplicateNodeIdList) or (query[1]._Node__id in DuplicateNodeIdList)):
					DuplicateNodeIdList.append(query[0]._Node__id)
					DuplicateNodeIdList.append(query[1]._Node__id)
					functionId[3] +=1
					print query
				if not (query[1]._Node__id in DuplicateNodeIdList):
					DuplicateNodeIdList.append(query[1]._Node__id)

print '\nM3 Value: '
for functionId in FunctionMetricList:
	print 'Function with id [',functionId[0],'] = ', functionId[3]
print "\n"

# M4: (Maximum nesting level of loops)
print "\n"
print "******************** M4 ********************"
print "Maximum nesting level of loops:\n"
http.my_variable=5
C4_Query = j.runGremlinQuery("queryNodeIndex('functionId:(*) AND type:(ForStatement WhileStatement DoStatement)').groupBy{it.functionId}{it.id}.as('x').astNodes().children().as('y').filter{it.type == 'ForStatement' || it.type == 'WhileStatement' || it.type == 'DoStatement'}.select{it}{it}.groupBy{it[0]}{it[1]}")
print '\n'
http.my_variable=1
print 'Query Statements:\n'
for query in C4_Query: print query
My_Nodes = []
c4_Main_lock=0
c4_lock=0
for query in C4_Query:
	if query[0]._Node__id != query[1]._Node__id:
		if c4_Main_lock == 0:
			c4_Main_lock=1
			My_Nodes.append([query[1]._Node__id,1,query[1]['functionId']])
		else:
			for x in My_Nodes:
				if  x[0] == query[0]._Node__id:
					c4_lock=1
					x[1]+=1
			if c4_lock == 0:
				My_Nodes.append([query[1]._Node__id,1,query[1]['functionId']])
			c4_lock=0
			
for x in My_Nodes:
	for functionId in FunctionMetricList:
		if x[2] == functionId[0]:
			if x[1] > functionId[4]:
				functionId[4] = x[1]
for functionId in FunctionMetricList:
	functionId[4] +=1
	
C4_Query=None
print '\nC4 Value: '
for functionId in FunctionMetricList:
	print 'Function with id [',functionId[0],'] = ', functionId[4]
print "\n"


print "******************** Vulnerability Metrics ********************"
print "\n"


# M5: (Number of parameter variables)
print "\n"
print "******************** M5 ********************"
print "Number of parameter variables:\n"
V1_Query = j.runGremlinQuery("queryNodeIndex('functionId:(*) AND type:Parameter')")

print '\n'
print 'Query Statements:\n'
for query in V1_Query:print query

for query in V1_Query:
	for functionId in FunctionMetricList:
		if query['functionId'] == functionId[0]:
			functionId[5] +=1

V1_Query=None
print '\nV1 Value: '
for functionId in FunctionMetricList:
	print 'Function with id [',functionId[0],'] = ', functionId[5]
print "\n"



# M6: (Number of variables as parameters for callee function)
print "\n"
print "******************** M6 ********************"
print "Number of variables as parameters for callee function:\n"
http.my_variable=5
V2_Query = j.runGremlinQuery("queryNodeIndex('functionId:(*) AND type:Callee').as('x').parents().astNodes().children().as('y').filter{it.type == 'Argument'}.select{it}{it}") 
http.my_variable=1
#get list of names of functions
functions_id_names = []
http.my_variable=5
V2_another_query =  j.runGremlinQuery("queryNodeIndex('type: Function')")
http.my_variable=1
for item in V2_another_query:
	functions_id_names.append([item._id,item['name']])
	

for query in V2_Query:
	for item in functions_id_names:
		if query[0]['code'] == item[1]:
			for functionId in FunctionMetricList:
				if item[0] == functionId[0]:
					functionId[6] +=1

V2_Query=None
print '\nM6 Value: '
for functionId in FunctionMetricList:
	print 'Function with id [',functionId[0],'] = ', functionId[6]
print "\n"


# M7: (Number of pointer arithmetic)
print "\n"
print "******************** M7 ********************"
print "Number of pointer arithmetic:\n"

http.my_variable=5
#To get number of struct pointer member access operations(like a->b):\n'
V3_1_Query = j.runGremlinQuery("queryNodeIndex('functionId:(*) AND type:PtrMemberAccess').dedup")
http.my_variable=1

for item in V3_1_Query:
	for functionId in FunctionMetricList:
		if item['functionId'] == functionId[0]:
			functionId[7] +=1

V3_1_Query=None
#To get number of pointer dereference operations(like *a):\n'
http.my_variable=5
V3_2_Query = j.runGremlinQuery("queryNodeIndex('functionId:(*) AND type:UnaryOperator').filter{it.code=='*'}.dedup")
http.my_variable=1
for item in V3_2_Query:
	for functionId in FunctionMetricList:
		if item['functionId'] == functionId[0]:
			functionId[7] +=1

V3_2_Query=None
#To get increment/Decrement operations(to filter ones include pointer variables):\n'
http.my_variable=5
V3_3_Query = j.runGremlinQuery("queryNodeIndex('functionId:(*) AND type:(UnaryExpression IncDecOp)').dedup.groupBy{it.functionId}{it.code}")
http.my_variable=1

for item in V3_3_Query:
	for functionId in FunctionMetricList:
		if item['functionId'] == functionId[0]:
			functionId[7] +=1
			
V3_3_Query=None
print '\nV3 Value: '
for functionId in FunctionMetricList:
	print 'Function with id [',functionId[0],'] = ', functionId[7]
print "\n"


# M8: (Number of variables involved in pointer arithmetic)
print "\n"
print "******************** M8 ********************"
print "Number of variables involved in pointer arithmetic:\n"



#To get variables in struct pointer member access operations:\n'
http.my_variable=5
V4_1_Query = j.runGremlinQuery("queryNodeIndex('functionId:(*) AND type:PtrMemberAccess').out('USE').dedup.groupBy{it.functionId}{it.code}")
http.my_variable=1
for item in V4_1_Query:
	for functionId in FunctionMetricList:
		if item['functionId'] == functionId[0]:
			functionId[8] +=1


V4_1_Query=None
#To get address operations(like &a) and their variables involved:\n'
http.my_variable=5
V4_2_Query = j.runGremlinQuery("queryNodeIndex('functionId:(*) AND type:UnaryOp').as('op').children().filter{it.type=='UnaryOperator' && it.code=='&'}.back('op').astNodes().filter{it.type=='Identifier'}.code.as('sys').dedup.select")
http.my_variable=1
for item in V4_2_Query:
	for functionId in FunctionMetricList:
		if item[0]['functionId'] == functionId[0]:
			functionId[8] +=1


V4_2_Query=None
#To get variables in pointer dereference operations:\n'
http.my_variable=5
V4_3_Query = j.runGremlinQuery("queryNodeIndex('functionId:(*) AND type:UnaryOp').as('here').children().filter{it.type=='UnaryOperator' && it.code=='*'}.back('here').out('USE').groupBy{it.functionId}{it.code}.dedup")
http.my_variable=1
for item in V4_3_Query:
	for functionId in FunctionMetricList:
		if item['functionId'] == functionId[0]:
			functionId[8] +=1

V4_3_Query=None
print '\nM7 Value: '
for functionId in FunctionMetricList:
	print 'Function with id [',functionId[0],'] = ', functionId[8]
print "\n"


# M8: (Max pointer arithmetic a variable is involved in)
print "\n"
print "******************** M9 ********************"
print "Max pointer arithmetic a variable is involved in:\n"

#To get variables in pointer dereference operations:\n'
http.my_variable=5
V5_Query = j.runGremlinQuery("queryNodeIndex('functionId:(*) AND type:UnaryOp').as('here').children().filter{it.type=='UnaryOperator' && it.code=='*'}.back('here').out('USE').groupBy{it.functionId}{it.code}.dedup")
http.my_variable=1
for item in V5_Query:
	for functionId in FunctionMetricList:
		if item['functionId'] == functionId[0]:
			functionId[9] +=1

V5_Query=None			
print '\nV5 Value: '
for functionId in FunctionMetricList:
	print 'Function with id [',functionId[0],'] = ', functionId[9]
print "\n"


# M10: (Number of nested control structures)
print "\n"
print "******************** M10 ********************"
print "Number of nested control structures:\n"
http.my_variable=5
V6_Query_Statement = j.runGremlinQuery("OR(queryNodeIndex('functionId:(*) AND type:Condition').in('IS_AST_PARENT'),queryNodeIndex('functionId:%s AND type:ForStatement')).dedup().groupBy{it.functionId}{it.id}.as('x').astNodes().children().as('y').filter{it.type == 'SwitchStatement' ||it.type == 'ForStatement' || it.type == 'WhileStatement' || it.type == 'DoStatement' || it.type == 'IfStatement'}.select{it.id}{it.id}.groupBy{it[0]}{it[1]}")
http.my_variable=1
http.my_variable=5
V6_Query = j.runGremlinQuery("OR(queryNodeIndex('functionId:(*) AND type:Condition').in('IS_AST_PARENT'),queryNodeIndex('functionId:%s AND type:ForStatement')).dedup().groupBy{it.functionId}{it.id}.as('x').astNodes().children().as('y').filter{it.type == 'SwitchStatement' ||it.type == 'ForStatement' || it.type == 'WhileStatement' || it.type == 'DoStatement' || it.type == 'IfStatement'}.select{it.functionId}{it.id}.groupBy{it[0]}{it[1]}")
http.my_variable=1

print '\n'
print 'Query Statements:\n'
for query in V6_Query_Statement:print query


V6_False_Loop_Array = []
V6_insert_lock = 1
for query in V6_Query:
	for functionId in FunctionMetricList:
		if query[0] == functionId[0]:
			for item in V6_False_Loop_Array:
				if item == query[1]:
					V6_insert_lock = 0
			if V6_insert_lock == 1:
				V6_False_Loop_Array.append(query[1])
				functionId[10] +=1
			V6_insert_lock = 1

V6_Query=None
V6_Query_Statement=None
print '\nM9 Value: '
for functionId in FunctionMetricList:
	print 'Function with id [',functionId[0],'] = ', functionId[10]
print "\n"




# M11: (Maximum nesting level of control structures)
print "\n"
print "******************** M11 ********************"
print "Maximum nesting level of control structures:\n"
http.my_variable=5
V7_Query = j.runGremlinQuery("OR(queryNodeIndex('functionId:(*) AND type:Condition').in('IS_AST_PARENT'),queryNodeIndex('functionId:%s AND type:ForStatement')).dedup().groupBy{it.functionId}{it.id}.as('x').astNodes().children().as('y').filter{it.type == 'SwitchStatement' ||it.type == 'ForStatement' || it.type == 'WhileStatement' || it.type == 'DoStatement' || it.type == 'IfStatement'}.select{[it.functionId,it.id]}{it.id}.groupBy{it[0]}{it[1]}")

http.my_variable=1
V7_False_Loop_Array = []
V7_First_Array_Result = []
V7_insert_lock = 1


for query in V7_Query:
	for functionId in FunctionMetricList:
		if query[0][0] == functionId[0]:
			for item in V7_False_Loop_Array:
				if item == query[1]:
					V7_insert_lock = 0
			if V7_insert_lock == 1:
				V7_False_Loop_Array.append(query[1])
				V7_First_Array_Result.append([query[0][0],query[0][1],query[1]])
			V7_insert_lock = 1



V7_Final_Array = []
if not V7_Final_Array:V7_Final_Array.append([V7_First_Array_Result[0][0],[V7_First_Array_Result[0][1],V7_First_Array_Result[0][2],1]])

#add_new_function_first_row_lock = 1
extend_condition_lock = 0
for item in V7_First_Array_Result:
	V7_Lock = 1;
	add_new_function_first_row_lock = 1
	for final_item in V7_Final_Array:
		if item[0] == final_item[0]:
			add_new_function_first_row_lock = 0
			for i in range(len(final_item)):
				if i != 0: #i == 0 ==> functionId
#					print '\ni : ',i,' | final_item: ',final_item[i],'  | item: ',item
					if (item[1] == final_item[i][0] and item[2] == final_item[i][1]):
#						print 'my_break__'
						break
					else:
#						print 'else condition__'
#						print 'item[1]: ',item[1],' | item[2]: ',item[2],' | item[',i,'][0] : ',final_item[i][0],' | item[',i,'][1]: ',final_item[i][1]
						if V7_Lock == 1:
#							print 'in if lock'
							if item[2] == final_item[i][0]:
#								print 'first if'
								final_item[i][0] = item[1]
								final_item[i][2] +=1
								V7_Lock = 0
								extend_condition_lock = 0
							elif item[1] == final_item[i][1]:
#								print 'second if'
								final_item[i][1] = item[2]
								final_item[i][2] +=1
								V7_Lock = 0
								extend_condition_lock = 0
							else: #item[1] == final_item[i][0] OR no matching
#								print 'in else'
								extend_condition_lock = 1
								#final_item.extend([[item[1],item[2],1]])
								#V7_Lock = 0
			if extend_condition_lock == 1:
				V7_Lock = 0
				final_item.extend([[item[1],item[2],1]])
#					print 'test: '
#					for item in V7_Final_Array:print item
#					break
	if add_new_function_first_row_lock == 1:
		V7_Final_Array.append([item[0],[item[1],item[2],1]])
		add_new_function_first_row_lock = 0
						



for item in V7_Final_Array:
	for functionId in FunctionMetricList:
		if item[0] == functionId[0]:
			Max = 0
			for i in range(len(item)):
				if i != 0: #i == 0 ==> functionId
					if item[i][2] > Max:
						Max = item[i][2]
			functionId[11] = Max



for functionId in FunctionMetricList:
	if functionId[11] != 0:
		functionId[11] +=1
	
V7_Query=None
print '\nM10 Value: '
for functionId in FunctionMetricList:
	print 'Function with id [',functionId[0],'] = ', functionId[11]
print "\n"

# M11: (Maximum of control-dependent control structures) --> it needs to be implemented more accurately Later!!
print "\n"
print "******************** M12 ********************"
print "Maximum of control-dependent control structures:\n"

#get CDG information to know whether the control structures are control dependent:
http.my_variable=5
CDG_Query = j.runGremlinQuery("queryNodeIndex('functionId:(*) AND type:Condition AND isCFGNode:True').as('x').outE('CONTROLS').as('y').select{[it.id,it.code,it.functionId]}{it}.groupBy{it[0]}{it[1]}")
http.my_variable=1
print '\n'
print 'Query Statements:\n'
http.my_variable=5
for query in CDG_Query:
	if query[1].end_node['type'] == 'Condition':
		print query

http.my_variable=1
for query in CDG_Query:
	for functionId in FunctionMetricList:
		if query[0][2] == functionId[0]:
			if query[1].end_node['type'] == 'Condition':
				functionId[12]+=1

CDG_Query=None
print '\nV8 Value: '
for functionId in FunctionMetricList:
	print 'Function with id [',functionId[0],'] = ', functionId[12]
print "\n"


# M12: (Maximum of data-dependent control structures)
print 'CDG_Query value after Set None === ',CDG_Query,'\n\n'
print "\n"
print "******************** M13 ********************"
print "Maximum of data-dependent control structures:\n"

http.my_variable=5
V9_0_Query = j.runGremlinQuery("getNodesWithType('Condition').as('x').select{[it.id,it.functionId]}")
http.my_variable=1
print 'first_debugging\n\n'
#To get DDG information to know whether the control structures are Involved with the same var:
http.my_variable=5
V9_1_Query = j.runGremlinQuery("queryNodeIndex('functionId:(*) AND isCFGNode:True').as('x').outE('REACHES').as('y').select{it}{it}.groupBy{it[0]}{it[1]}")
http.my_variable=1
print 'second_debugging\n\n'

#To get var declare statements information to identify those pointer vars that share the same memory:
#V9_2_Query = j.runGremlinQuery("queryNodeIndex('functionId:(*) AND type:IdentifierDeclStatement').as('x').uses()")
#V9_3_Query = j.runGremlinQuery("queryNodeIndex('functionId:(*) AND type:IdentifierDeclStatement').as('x').defines()")

V9_final_array = []
V9_Lock = 0
for f_item in V9_0_Query:
	for l_item in V9_1_Query:
		if f_item[0][0] == l_item[1].end_node._id:
			V9_Lock = 1
			break
	if V9_Lock == 1:
		V9_final_array.append([f_item[0][0],f_item[0][1]])
	V9_Lock = 0


print 'third_debugging\n\n'
for item in V9_final_array:
	for functionId in FunctionMetricList:
		if item[1] == functionId[0]:
			functionId[13]+=1
print 'four_debugging\n\n'
V9_0_Query=None
V9_1_Query=None
print '\nV9 Value: '
for functionId in FunctionMetricList:
	print 'Function with id [',functionId[0],'] = ', functionId[13]
print "\n"

# M13: (if withOut else)
print "\n"
print "******************** M14 ********************"
print "Number of if structures without else:\n"
http.my_variable=5
V10_Query = j.runGremlinQuery("queryNodeIndex('functionId:(*) AND type:Condition').parents().filter{it.type=='IfStatement'}.as('x').ithChildren('0').as('y').select{it}{it}")
http.my_variable=1
print '\n'
print 'Query Statements:\n'
for query in V10_Query: print query

IfStatementArray = []

for query in V10_Query:
	if not ((query[0]['type'] == 'ElseStatement') or (query[1]['type'] == 'ElseStatement')):
		IfStatementArray.append([ query[0]._Node__id , query[1]._Node__id , query[0]['functionId'] ])	
	else:
		for item in IfStatementArray:
			if (item[0] == query[0]._Node__id or item[1] == query[1]._Node__id):
				IfStatementArray.remove(item)
				
for item in IfStatementArray:
	for functionId in FunctionMetricList:
		if item[2] == functionId[0]:
			functionId[14]+=1			
V10_Query=None
print '\nM14 Value: '
for functionId in FunctionMetricList:
	print 'Function with id [',functionId[0],'] = ', functionId[14]
print "\n"


# M15: (Number of variables involved in control predicates)
print "\n"
print "******************** M15 ********************"
print "Number of variables involved in control predicates:\n"
http.my_variable=5
#get DDG information to know which variables are used by the control structures:
DDG_Query = j.runGremlinQuery("queryNodeIndex('functionId:(*) AND isCFGNode:True').as('x').outE('REACHES').as('y').select{it}{it.property('var')}")
http.my_variable=1
ddg_variables = []
V11_help_lock = 1

for item in DDG_Query:
	for functionId in FunctionMetricList:
		if item[0]['functionId'] == functionId[0]:
			if not ddg_variables:
				ddg_variables.append([item[0]['functionId'],item[1][0]])
			else:
				for var in ddg_variables:
					if var[1] == item[1][0]:
						V11_help_lock = 0
				if V11_help_lock == 1:
					ddg_variables.append([item[0]['functionId'],item[1][0]])
				V11_help_lock = 1


DDG_Query=None
#To get control structures nodes' ids (get it's identifiers):
http.my_variable=5
VARs_in_Pridicate_Control = j.runGremlinQuery("getNodesWithType('Condition').astNodes().filter{it.type=='Identifier'}")	
http.my_variable=1
final_var_array = []
for var in ddg_variables:
	for item in VARs_in_Pridicate_Control:
		if var[1] == item['code']:
			final_var_array.append([var[0] , var[1]])
			break

VARs_in_Pridicate_Control=None
#remove probably duplicate items
final_var_array = get_unique_list(final_var_array)

print "Query Result Statement:\n"
#for item in final_var_array:print item[0]


for item in final_var_array:
	for functionId in FunctionMetricList:
		if item[0] == functionId[0]:
			functionId[15]+=1
			
print '\nV11 Value: '
for functionId in FunctionMetricList:
	print 'Function with id [',functionId[0],'] = ', functionId[15]
print "\n"

#End Of Calculating Metrics

print '***********************************   M E R T I C S   ***********************************'
print 'Successful!\n End of This Program'

#End of This Module
print 'End of This Module'








